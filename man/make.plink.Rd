% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/2_parametric_link_functions.R
\name{make.plink}
\alias{make.plink}
\title{Create Non-parametric and Parametric Link Functions}
\usage{
make.plink(link)
}
\arguments{
\item{link}{character; see details to view the current available link
functions.}
}
\value{
Given a link abbreviation, it returns a link function
     (\code{linkfun}); an inverse link function (\code{linkinv}); the first and the second
      derivatives of \code{mu} with respect to \code{eta}  (\code{mu.eta} and \code{mu2.eta2},
      respectively); the first and the second derivatives of \code{mu} with respect to
      \code{lambda} (\code{rho} and \code{rho2}, respectively); a logical value which is
      \code{TRUE} if the link function belongs to a parametric family (\code{plink}); and
      the lowercase name of link function (\code{name}). More specifically, it returns a list
      with the following components:

\describe{
  \item{linkfun}{Link function \code{function(mu, lambda)}.}
  \item{linkinv}{Inverse link function \code{function(eta, lambda)}.}
  \item{mu.eta}{Derivative \code{function(eta, lambda)} \emph{dmu/deta}.}
  \item{mu2.eta2}{Second order derivative \code{function(eta, lambda)} \emph{d2 mu/d eta2}.}
  \item{rho}{Derivative \code{function(eta, lambda)} \emph{dmu/dlambda}. If
  the link function does not belongs to a parametric family, then it returns
  \code{NULL}.}
  \item{rho2}{Second order derivative \code{function(eta, lambda)} \emph{d2 mu/d lambda2}. If
  the link function does not belongs to a parametric family, then it returns
  \code{NULL}.}
  \item{rho.eta}{Second order derivative \code{function(eta, lambda)} \emph{d2 mu/dlambda deta}. If
  the link function does not belongs to a parametric family, then it returns
  \code{NULL}.}
  \item{plink}{logical; if \code{TRUE}, the link function belongs to a parametric
   family.}
  \item{name}{A name to be used for the link.}
 }
}
\description{
This function has the same spirit as the \code{\link[stats]{make.link}}
     \{stats\} function which creates links for GLM families. However, it
     additionally allows the use of parametric link functions as, for
     example, the Aranda-Ordaz link function.
}
\details{
We assume that the link functions belonging to a parametric
    family are indexed by a positive parameter \code{lambda}.
    When the link function does not belong to this family
    (e.g., the logit function), then, by default, \code{lambda = NULL}.
    Otherwise, \code{lambda} must be specified.

    The available link functions are

  \tabular{llc}{
 \bold{Link function}  \tab \bold{Abbreviation} \tab \bold{Is it a parametric link function?}\cr
 Logit \tab \code{"logit"} \tab \code{FALSE} \cr
 Probit \tab \code{"probit"} \tab \code{FALSE} \cr
 Cauchit \tab \code{"cauchit"} \tab \code{FALSE} \cr
 Log-Log \tab \code{"loglog"} \tab \code{FALSE} \cr
 Complement log-log \tab \code{"cloglog"} \tab \code{FALSE} \cr
 Identity \tab \code{"identity"} \tab \code{FALSE} \cr
 Aranda-Ordaz \tab  \code{"aordaz"} \tab \code{TRUE} \cr
 Power logit \tab  \code{"plogit"} \tab \code{TRUE} \cr
 Power pobit \tab \code{"pprobit"} \tab \code{TRUE}  \cr
 Power cauchit \tab \code{"pcauchit"} \tab \code{TRUE}  \cr
 Power log-log \tab \code{"ploglog"} \tab \code{TRUE}  \cr
 Power complement log-log \tab \code{"pcloglog"} \tab \code{TRUE}\cr
 Reversal power logit \tab \code{"rplogit"} \tab \code{TRUE}  \cr
 Reversal power pobit \tab \code{"rpprobit"} \tab \code{TRUE}  \cr
 Reversal power cauchit \tab \code{"rpcauchit"} \tab \code{TRUE}  \cr
 Reversal power log-log \tab \code{"rploglog"} \tab \code{TRUE} \cr
 Reversal power complement log-log \tab \code{"rpcloglog"} \tab \code{TRUE} \cr
 Reversal Aranda-Ordaz \tab \code{"raordaz"} \tab \code{TRUE}
 }
}
\examples{
### Non-parametric link functions
curve(make.plink("logit")$linkinv(x), xlim = c(-10, 10), ylim = c(0, 1),
      main = "Non-parametric link functions",
      xlab = expression(eta), ylab = "Inverse")
curve(make.plink("probit")$linkinv(x), add = TRUE, col = 2)
curve(make.plink("cauchit")$linkinv(x), add = TRUE, col = 3)
curve(make.plink("loglog")$linkinv(x), add = TRUE, col = 4)
curve(make.plink("cloglog")$linkinv(x), add = TRUE, col = 6)
legend("bottomright", legend = c("logit", "probit", "cauchit", "loglog", "cloglog"),
       lty = 1, col = c(1,2,3,4,6), bty = "n")

### Aranda-Ordaz
curve(make.plink("aordaz")$linkinv(x, 0.5), xlim = c(-10, 10), ylim = c(0, 1),
      main = "Aranda-Ordaz link function", xlab = expression(eta), ylab = "Inverse")
curve(make.plink("aordaz")$linkinv(x, 1), add = TRUE, col = 2)
curve(make.plink("aordaz")$linkinv(x, 3), add = TRUE, col = 3)
curve(make.plink("aordaz")$linkinv(x, 6), add = TRUE, col = 4)
legend("bottomright", legend = c(expression(lambda == 0.5),
                                 expression(lambda == 1),
                                 expression(lambda == 3),
                                 expression(lambda == 6)),
       lty = 1, col = c(1,2,3,4), bty = "n")

### Reversal Aranda-Ordaz
curve(make.plink("raordaz")$linkinv(x, 0.5), xlim = c(-10, 10), ylim = c(0, 1),
      main = "Reversal Aranda-Ordaz link function", xlab = expression(eta), ylab = "Inverse")
curve(make.plink("raordaz")$linkinv(x, 1), add = TRUE, col = 2)
curve(make.plink("raordaz")$linkinv(x, 3), add = TRUE, col = 3)
curve(make.plink("raordaz")$linkinv(x, 6), add = TRUE, col = 4)
legend("bottomright", legend = c(expression(lambda == 0.5),
                                 expression(lambda == 1),
                                 expression(lambda == 3),
                                 expression(lambda == 6)),
       lty = 1, col = c(1,2,3,4), bty = "n")

### Power logit
curve(make.plink("plogit")$linkinv(x, 0.5), xlim = c(-10, 10), ylim = c(0, 1),
      main = "Power logit link function", xlab = expression(eta), ylab = "Inverse")
curve(make.plink("plogit")$linkinv(x, 1), add = TRUE, col = 2)
curve(make.plink("plogit")$linkinv(x, 3), add = TRUE, col = 3)
curve(make.plink("plogit")$linkinv(x, 6), add = TRUE, col = 4)
legend("bottomright", legend = c(expression(lambda == 0.5),
                                 expression(lambda == 1),
                                 expression(lambda == 3),
                                 expression(lambda == 6)),
       lty = 1, col = c(1,2,3,4), bty = "n")


### Reversal power logit
curve(make.plink("rplogit")$linkinv(x, 0.5), xlim = c(-10, 10), ylim = c(0, 1),
      main = "Reversal power logit link function", xlab = expression(eta), ylab = "Inverse")
curve(make.plink("rplogit")$linkinv(x, 1), add = TRUE, col = 2)
curve(make.plink("rplogit")$linkinv(x, 3), add = TRUE, col = 3)
curve(make.plink("rplogit")$linkinv(x, 6), add = TRUE, col = 4)
legend("bottomright", legend = c(expression(lambda == 0.5),
                                 expression(lambda == 1),
                                 expression(lambda == 3),
                                 expression(lambda == 6)),
       lty = 1, col = c(1,2,3,4), bty = "n")

}
\references{
Bazán, J. L., Torres-Avilés, F., Suzuki, A. K., & Louzada, F. (2017). Power and reversal power
 links for binary regressions: An application for motor insurance policyholders.
  \emph{Applied Stochastic Models in Business and Industry}, \bold{33}(1), 22--34.
}
\author{
Rodrigo M. R. de Medeiros <\email{rodrigo.matheus@live.com}>

Diego R. Canterle <\email{diegocanterle@gmail.com}>
}
